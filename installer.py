#!/usr/bin/env python3
"""
Instalador Automatizado para PartnerShip Automation
Vers√£o 2.0 - Instala√ß√£o Completa e Automatizada
"""

import os
import sys
import subprocess
import shutil
import zipfile
import requests
import json
from pathlib import Path
import platform


class PartnerShipInstaller:
    def __init__(self):
        self.install_dir = Path.home() / "PartnerShip-Automation"
        self.python_version = "3.8"
        self.required_packages = [
            "numpy>=1.21.0",
            "pandas>=1.5.0",
            "pyautogui>=0.9.54",
            "pygetwindow>=0.0.9",
            "selenium>=4.10.0",
            "openpyxl>=3.1.0",
            "xlrd>=2.0.1",
            "requests>=2.25.0"
        ]

    def print_banner(self):
        """Exibe o banner de instala√ß√£o"""
        print("=" * 60)
        print("üöÄ PARTNERSHIP AUTOMATION - INSTALADOR AUTOMATIZADO")
        print("=" * 60)
        print(f"üìÅ Diret√≥rio de instala√ß√£o: {self.install_dir}")
        print(f"üêç Python necess√°rio: {self.python_version}+")
        print(f"üíª Sistema: {platform.system()} {platform.release()}")
        print("=" * 60)
        print()

    def check_python_version(self):
        """Verifica se a vers√£o do Python √© compat√≠vel"""
        print("üîç Verificando vers√£o do Python...")

        version = sys.version_info
        if version.major < 3 or (version.major == 3 and version.minor < 8):
            print(
                f"‚ùå Python {version.major}.{version.minor} n√£o √© compat√≠vel!")
            print(f"   Necess√°rio: Python {self.python_version}+")
            return False

        print(
            f"‚úÖ Python {version.major}.{version.minor}.{version.micro} - Compat√≠vel!")
        return True

    def check_pip(self):
        """Verifica se o pip est√° dispon√≠vel"""
        print("üîç Verificando pip...")

        try:
            subprocess.run([sys.executable, "-m", "pip", "--version"],
                           check=True, capture_output=True)
            print("‚úÖ pip dispon√≠vel!")
            return True
        except (subprocess.CalledProcessError, FileNotFoundError):
            print("‚ùå pip n√£o encontrado!")
            return False

    def create_installation_directory(self):
        """Cria o diret√≥rio de instala√ß√£o"""
        print("üìÅ Criando diret√≥rio de instala√ß√£o...")

        try:
            self.install_dir.mkdir(parents=True, exist_ok=True)
            print(f"‚úÖ Diret√≥rio criado: {self.install_dir}")
            return True
        except Exception as e:
            print(f"‚ùå Erro ao criar diret√≥rio: {e}")
            return False

    def copy_source_files(self):
        """Copia os arquivos fonte para o diret√≥rio de instala√ß√£o"""
        print("üìã Copiando arquivos fonte...")

        source_files = [
            "partnership.py",
            "config.py",
            "logger.py",
            "requirements.txt",
            "README_FINAL.md"
        ]

        copied_count = 0
        for file_name in source_files:
            if os.path.exists(file_name):
                try:
                    shutil.copy2(file_name, self.install_dir / file_name)
                    print(f"   ‚úÖ {file_name}")
                    copied_count += 1
                except Exception as e:
                    print(f"   ‚ùå {file_name}: {e}")
            else:
                print(f"   ‚ö†Ô∏è {file_name} n√£o encontrado")

        print(f"‚úÖ {copied_count}/{len(source_files)} arquivos copiados!")
        return copied_count > 0

    def install_dependencies(self):
        """Instala as depend√™ncias Python"""
        print("üì¶ Instalando depend√™ncias...")

        try:
            # Atualiza o pip primeiro
            print("   üîÑ Atualizando pip...")
            subprocess.run([sys.executable, "-m", "pip", "install", "--upgrade", "pip"],
                           check=True, capture_output=True)

            # Instala as depend√™ncias
            for package in self.required_packages:
                print(f"   üì• Instalando {package}...")
                subprocess.run([sys.executable, "-m", "pip", "install", package],
                               check=True, capture_output=True)
                print(f"      ‚úÖ {package}")

            print("‚úÖ Todas as depend√™ncias instaladas!")
            return True

        except subprocess.CalledProcessError as e:
            print(f"‚ùå Erro ao instalar depend√™ncias: {e}")
            return False

    def create_desktop_shortcut(self):
        """Cria atalho na √°rea de trabalho"""
        print("üîó Criando atalho na √°rea de trabalho...")

        try:
            desktop = Path.home() / "Desktop"
            shortcut_path = desktop / "PartnerShip Automation.lnk"

            # Cria um arquivo .bat como alternativa
            bat_path = desktop / "PartnerShip Automation.bat"
            with open(bat_path, 'w', encoding='utf-8') as f:
                f.write(f'@echo off\n')
                f.write(f'cd /d "{self.install_dir}"\n')
                f.write(f'python partnership.py\n')
                f.write(f'pause\n')

            print(f"‚úÖ Atalho criado: {bat_path}")
            return True

        except Exception as e:
            print(f"‚ùå Erro ao criar atalho: {e}")
            return False

    def create_start_menu_shortcut(self):
        """Cria atalho no menu iniciar"""
        print("üîó Criando atalho no menu iniciar...")

        try:
            start_menu = Path.home() / "AppData" / "Roaming" / "Microsoft" / \
                "Windows" / "Start Menu" / "Programs"
            start_menu.mkdir(parents=True, exist_ok=True)

            shortcut_path = start_menu / "PartnerShip Automation.bat"
            with open(shortcut_path, 'w', encoding='utf-8') as f:
                f.write(f'@echo off\n')
                f.write(f'cd /d "{self.install_dir}"\n')
                f.write(f'python partnership.py\n')

            print(f"‚úÖ Atalho no menu iniciar criado!")
            return True

        except Exception as e:
            print(f"‚ùå Erro ao criar atalho no menu iniciar: {e}")
            return False

    def create_config_folders(self):
        """Cria pastas de configura√ß√£o necess√°rias"""
        print("üìÅ Criando pastas de configura√ß√£o...")

        folders = [
            self.install_dir / "logs",
            self.install_dir / "chromedriver",
            self.install_dir / "temp",
            Path.home() / "Desktop" / "Automate-Esocial"
        ]

        created_count = 0
        for folder in folders:
            try:
                folder.mkdir(parents=True, exist_ok=True)
                print(f"   ‚úÖ {folder}")
                created_count += 1
            except Exception as e:
                print(f"   ‚ùå {folder}: {e}")

        print(f"‚úÖ {created_count}/{len(folders)} pastas criadas!")
        return created_count > 0

    def create_sample_excel(self):
        """Cria planilha de exemplo"""
        print("üìä Criando planilha de exemplo...")

        try:
            import pandas as pd

            # Dados de exemplo
            sample_data = {
                'CPF': ['12345678901', '98765432100', '11122233344'],
                'Nome': ['Jo√£o Silva', 'Maria Santos', 'Pedro Oliveira'],
                'Cargo': ['Engenheiro', 'T√©cnico', 'Auxiliar']
            }

            df = pd.DataFrame(sample_data)
            excel_path = self.install_dir / "PartnerShip_Exemplo.xlsx"
            df.to_excel(excel_path, index=False)

            print(f"‚úÖ Planilha de exemplo criada: {excel_path}")
            return True

        except Exception as e:
            print(f"‚ùå Erro ao criar planilha de exemplo: {e}")
            return False

    def create_uninstaller(self):
        """Cria script de desinstala√ß√£o"""
        print("üóëÔ∏è Criando script de desinstala√ß√£o...")

        try:
            uninstall_path = self.install_dir / "uninstall.bat"
            with open(uninstall_path, 'w', encoding='utf-8') as f:
                f.write('@echo off\n')
                f.write('echo Desinstalando PartnerShip Automation...\n')
                f.write('echo.\n')
                f.write('echo Removendo arquivos...\n')
                f.write(f'rmdir /s /q "{self.install_dir}"\n')
                f.write('echo.\n')
                f.write('echo Removendo atalhos...\n')
                f.write(
                    f'del "%USERPROFILE%\\Desktop\\PartnerShip Automation.bat"\n')
                f.write(
                    f'del "%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\PartnerShip Automation.bat"\n')
                f.write('echo.\n')
                f.write('echo Desinstala√ß√£o conclu√≠da!\n')
                f.write('pause\n')

            print(f"‚úÖ Script de desinstala√ß√£o criado!")
            return True

        except Exception as e:
            print(f"‚ùå Erro ao criar script de desinstala√ß√£o: {e}")
            return False

    def create_install_log(self):
        """Cria log da instala√ß√£o"""
        print("üìù Criando log da instala√ß√£o...")

        try:
            import datetime

            log_data = {
                'install_date': datetime.datetime.now().isoformat(),
                'python_version': f"{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}",
                'platform': platform.platform(),
                'install_dir': str(self.install_dir),
                'dependencies': self.required_packages
            }

            log_path = self.install_dir / "install_log.json"
            with open(log_path, 'w', encoding='utf-8') as f:
                json.dump(log_data, f, indent=2, ensure_ascii=False)

            print(f"‚úÖ Log da instala√ß√£o criado!")
            return True

        except Exception as e:
            print(f"‚ùå Erro ao criar log da instala√ß√£o: {e}")
            return False

    def run_tests(self):
        """Executa testes b√°sicos"""
        print("üß™ Executando testes b√°sicos...")

        try:
            # Testa importa√ß√£o dos m√≥dulos
            test_imports = [
                "import pandas",
                "import selenium",
                "import pyautogui",
                "import tkinter"
            ]

            for import_test in test_imports:
                try:
                    exec(import_test)
                    print(f"   ‚úÖ {import_test}")
                except Exception as e:
                    print(f"   ‚ùå {import_test}: {e}")

            print("‚úÖ Testes b√°sicos conclu√≠dos!")
            return True

        except Exception as e:
            print(f"‚ùå Erro nos testes: {e}")
            return False

    def install(self):
        """Executa a instala√ß√£o completa"""
        print("üöÄ Iniciando instala√ß√£o...")
        print()

        steps = [
            ("Verifica√ß√£o do Python", self.check_python_version),
            ("Verifica√ß√£o do pip", self.check_pip),
            ("Cria√ß√£o do diret√≥rio", self.create_installation_directory),
            ("C√≥pia dos arquivos", self.copy_source_files),
            ("Instala√ß√£o das depend√™ncias", self.install_dependencies),
            ("Cria√ß√£o das pastas", self.create_config_folders),
            ("Cria√ß√£o da planilha exemplo", self.create_sample_excel),
            ("Cria√ß√£o dos atalhos", self.create_desktop_shortcut),
            ("Cria√ß√£o do menu iniciar", self.create_start_menu_shortcut),
            ("Cria√ß√£o do desinstalador", self.create_uninstaller),
            ("Cria√ß√£o do log", self.create_install_log),
            ("Execu√ß√£o dos testes", self.run_tests)
        ]

        successful_steps = 0
        total_steps = len(steps)

        for step_name, step_func in steps:
            print(f"üìã {step_name}...")
            if step_func():
                successful_steps += 1
            print()

        # Resumo da instala√ß√£o
        print("=" * 60)
        print("üìä RESUMO DA INSTALA√á√ÉO")
        print("=" * 60)
        print(f"‚úÖ Passos bem-sucedidos: {successful_steps}/{total_steps}")
        print(f"üìÅ Diret√≥rio de instala√ß√£o: {self.install_dir}")
        print(f"üîó Atalho na √°rea de trabalho: PartnerShip Automation.bat")
        print()

        if successful_steps == total_steps:
            print("üéâ INSTALA√á√ÉO CONCLU√çDA COM SUCESSO!")
            print()
            print("üìñ PR√ìXIMOS PASSOS:")
            print(
                "1. Clique duas vezes no atalho 'PartnerShip Automation' na √°rea de trabalho")
            print("2. O sistema detectar√° automaticamente a vers√£o do Chrome")
            print("3. Baixar√° o ChromeDriver correto automaticamente")
            print("4. Execute a automa√ß√£o normalmente")
            print()
            print("üìû Em caso de problemas, verifique os logs em:")
            print(f"   {self.install_dir}/logs/")
        else:
            print("‚ö†Ô∏è INSTALA√á√ÉO PARCIALMENTE CONCLU√çDA")
            print("   Alguns passos falharam. Verifique os erros acima.")

        print("=" * 60)

        return successful_steps == total_steps


def main():
    """Fun√ß√£o principal"""
    try:
        installer = PartnerShipInstaller()
        installer.print_banner()

        # Confirma√ß√£o do usu√°rio
        response = input(
            "Deseja continuar com a instala√ß√£o? (s/N): ").strip().lower()
        if response not in ['s', 'sim', 'y', 'yes']:
            print("‚ùå Instala√ß√£o cancelada pelo usu√°rio.")
            return

        # Executa a instala√ß√£o
        success = installer.install()

        if success:
            input("\nPressione Enter para sair...")
        else:
            input("\nPressione Enter para sair (verifique os erros acima)...")

    except KeyboardInterrupt:
        print("\n\n‚ùå Instala√ß√£o interrompida pelo usu√°rio.")
    except Exception as e:
        print(f"\n\n‚ùå Erro inesperado: {e}")
        input("\nPressione Enter para sair...")


if __name__ == "__main__":
    main()
